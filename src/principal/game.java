/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package principal;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import principal.frmMain.Juego;

/**
 *
 * @author dell
 */
public class game extends javax.swing.JFrame {
     private String juegoSeleccionado;
    
    public game() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("UnetGames");
        
        this.addComponentListener(new java.awt.event.ComponentAdapter() {
            @Override
            public void componentResized(java.awt.event.ComponentEvent evt) {
                ajustarGameImagePanel();
            }
        });
    }
    
    private void ajustarGameImagePanel() {
        // Obtener el tamaño del JFrame
        int frameWidth = this.getWidth();
        int frameHeight = this.getHeight();

        // Mantener la relación de aspecto 16:9
        int newWidth = frameWidth;
        int newHeight = (int) (newWidth / 16.0 * 9);

        if (newHeight > frameHeight) {
            newHeight = frameHeight;
            newWidth = (int) (newHeight * 16.0 / 9);
        }

        // Ajustar el tamaño del gameImagePanel
        gameImage.setSize(newWidth, newHeight);
        gameImage.setPreferredSize(new java.awt.Dimension(newWidth, newHeight));

        // Centrar el gameImagePanel
        gameImage.setLocation((frameWidth - newWidth) / 2, (frameHeight - newHeight) / 2);

        // Actualizar el diseño
        this.revalidate();
        this.repaint();
    }

    
    public void actualizarInformacion(Juego juego) {
        // Actualizar la imagen del cover
        String coverPath = juego.getCoverPath();
        List<JLabel> tarjetas = List.of(jLabel9, jLabel10, jLabel11, jLabel2);
        
        File file = new File(coverPath);
        if (file.exists()) {
            ImageIcon icon = new ImageIcon(file.getAbsolutePath());
            ImageIcon iconoEscalado = escalarImagen(juego.getCoverPath());
            jLabel1.setIcon(iconoEscalado); // Acceder directamente a jLabel1
        } else {
            System.err.println("No se encontró el archivo: " + coverPath);
        }
        
        // Actualizar el título
        jLabel2.setText(juego.getTitulo()); // Acceder directamente a labelTitle

        // Actualizar el subtítulo (si lo tienes)
        jLabel3.setText(juego.getSubtitulo()); // Acceder directamente a jLabel3

        // Actualizar la descripción
        jTextArea1.setText(juego.getDescripcion()); // Acceder directamente a jTextArea1
        
        this.juegoSeleccionado = juego.getGameFile();
        
        String[] categoriasArray = juego.getCategories().split(", ");
        
        for(int i=0; i< categoriasArray.length; i++){
            String categorie = categoriasArray[i];
            tarjetas.get(i).setText(categorie);
        }
    }

    public ImageIcon escalarImagen(String rutaImagen) {
            ImageIcon imagenIcono = new ImageIcon(rutaImagen);
        Image imagen = imagenIcono.getImage();

        int panelWidth = getWidth(); // Ancho del contenedor o ventana
        int panelHeight = (int) (panelWidth / 16.0 * 9);

        // Validar que las dimensiones del panel sean correctas
        if (panelWidth == 0 || panelHeight == 0) {
            // Usar valores por defecto o manejar el error
            return new ImageIcon(imagen);
        }

        int imgWidth = imagen.getWidth(null); // Usa null como ImageObserver
        int imgHeight = imagen.getHeight(null);

        // Calcular escala manteniendo la relación de aspecto
        double scale = Math.min((double) panelWidth / imgWidth, (double) panelHeight / imgHeight);
        int newWidth = (int) (imgWidth * scale);
        int newHeight = (int) (imgHeight * scale);

        // Escalar la imagen al tamaño deseado
        Image imagenEscalada = imagen.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);

        // Devolver la imagen escalada como ImageIcon
        return new ImageIcon(imagenEscalada);
}
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BgPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Body = new javax.swing.JPanel();
        contenedor = new javax.swing.JPanel();
        gameImage = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        bodyContainer = new javax.swing.JPanel();
        titlePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        subtitlePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        descriptionPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        tagPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        InternTags = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        titlePanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        saveGame = new javax.swing.JPanel();
        signInTxt3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1139, 637));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        BgPanel.setBackground(new java.awt.Color(2, 21, 38));
        BgPanel.setLayout(new java.awt.BorderLayout());

        Body.setBackground(new java.awt.Color(2, 21, 38));
        Body.setBorder(javax.swing.BorderFactory.createEmptyBorder(70, 150, 70, 150));
        Body.setLayout(new javax.swing.BoxLayout(Body, javax.swing.BoxLayout.LINE_AXIS));

        contenedor.setBackground(new java.awt.Color(27, 38, 59));
        contenedor.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        contenedor.setLayout(new java.awt.BorderLayout(0, 5));

        gameImage.setBackground(new java.awt.Color(27, 38, 59));
        gameImage.setMinimumSize(new java.awt.Dimension(717, 404));
        gameImage.setPreferredSize(new java.awt.Dimension(717, 404));
        gameImage.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/screenshot_demo.jpg"))); // NOI18N
        gameImage.add(jLabel1);

        contenedor.add(gameImage, java.awt.BorderLayout.PAGE_START);

        bodyContainer.setBackground(new java.awt.Color(27, 38, 59));
        bodyContainer.setLayout(new java.awt.GridLayout(5, 1));

        titlePanel.setBackground(new java.awt.Color(27, 38, 59));
        titlePanel.setPreferredSize(new java.awt.Dimension(717, 80));
        titlePanel.setLayout(new java.awt.BorderLayout());

        jLabel2.setBackground(new java.awt.Color(27, 38, 59));
        jLabel2.setFont(new java.awt.Font("Samsung Sans", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("FPS SHOOTER SPACE");
        jLabel2.setPreferredSize(new java.awt.Dimension(112, 80));
        titlePanel.add(jLabel2, java.awt.BorderLayout.CENTER);

        bodyContainer.add(titlePanel);

        subtitlePanel.setBackground(new java.awt.Color(27, 38, 59));
        subtitlePanel.setPreferredSize(new java.awt.Dimension(717, 80));
        subtitlePanel.setLayout(new java.awt.BorderLayout());

        jLabel3.setBackground(new java.awt.Color(27, 38, 59));
        jLabel3.setFont(new java.awt.Font("Samsung Sans", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Lineal fps shooter in the space, 5v5 cooperating.");
        jLabel3.setPreferredSize(new java.awt.Dimension(112, 80));
        subtitlePanel.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        bodyContainer.add(subtitlePanel);

        descriptionPanel.setBackground(new java.awt.Color(27, 38, 59));
        descriptionPanel.setPreferredSize(new java.awt.Dimension(717, 80));
        descriptionPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(27, 38, 59));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Samsung Sans", 0, 12)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Dead Space es un videojuego de disparos en tercera persona perteneciente al subgénero de terror y supervivencia desarrollado por EA Redwood Shores (hoy en día Visceral Games) y distribuido por Electronic Arts. Es el primer título de la serie Dead Space, franquicia que incluye videojuegos, cómics y películas. Fue lanzado en octubre de 2008 para las plataformas Xbox 360, PlayStation 3, y PC (Microsoft Windows).\n\nDead Space se lanzó a principios de 2006, con un primer prototipo que se ejecutó en Xbox. El creador Glen Schofield quería hacer el juego de terror más aterrador que pudiera imaginar, inspirándose en el videojuego Resident Evil 4 y en películas como Event Horizon y Solaris. El equipo buscó innovación y realismo en su diseño, desde la colocación procedimental de los enemigos hasta la eliminación de elementos del HUD. El diseño de sonido fue un enfoque particular durante la producción, con la partitura de Jason Graves diseñada para evocar tensión e inquietud.");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(null);
        jScrollPane2.setViewportView(jTextArea1);

        descriptionPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        bodyContainer.add(descriptionPanel);

        tagPanel.setBackground(new java.awt.Color(27, 38, 59));
        tagPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        tagPanel.setPreferredSize(new java.awt.Dimension(717, 60));
        tagPanel.setRequestFocusEnabled(false);
        tagPanel.setLayout(new java.awt.GridLayout(1, 0));

        jLabel4.setBackground(new java.awt.Color(27, 38, 59));
        jLabel4.setFont(new java.awt.Font("Samsung Sans", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Etiquetas: ");
        jLabel4.setToolTipText("");
        jLabel4.setMaximumSize(new java.awt.Dimension(118, 100));
        jLabel4.setMinimumSize(new java.awt.Dimension(118, 100));
        jLabel4.setPreferredSize(new java.awt.Dimension(130, 50));
        tagPanel.add(jLabel4);

        InternTags.setBackground(new java.awt.Color(27, 38, 59));
        InternTags.setPreferredSize(new java.awt.Dimension(300, 100));
        InternTags.setLayout(new java.awt.GridLayout(2, 2));

        jLabel9.setBackground(new java.awt.Color(27, 38, 59));
        jLabel9.setFont(new java.awt.Font("Samsung Sans", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Etiqueta1");
        InternTags.add(jLabel9);

        jLabel10.setBackground(new java.awt.Color(27, 38, 59));
        jLabel10.setFont(new java.awt.Font("Samsung Sans", 0, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        InternTags.add(jLabel10);

        jLabel11.setBackground(new java.awt.Color(27, 38, 59));
        jLabel11.setFont(new java.awt.Font("Samsung Sans", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        InternTags.add(jLabel11);

        jLabel12.setBackground(new java.awt.Color(27, 38, 59));
        jLabel12.setFont(new java.awt.Font("Samsung Sans", 0, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        InternTags.add(jLabel12);

        tagPanel.add(InternTags);

        bodyContainer.add(tagPanel);

        titlePanel1.setBackground(new java.awt.Color(27, 38, 59));
        titlePanel1.setPreferredSize(new java.awt.Dimension(717, 80));
        titlePanel1.setLayout(new java.awt.GridLayout(1, 1));

        jPanel3.setBackground(new java.awt.Color(27, 38, 59));
        jPanel3.setLayout(new java.awt.GridLayout(1, 2));

        jLabel6.setBackground(new java.awt.Color(27, 38, 59));
        jLabel6.setFont(new java.awt.Font("Samsung Sans", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Descargar:");
        jLabel6.setToolTipText("");
        jLabel6.setMaximumSize(new java.awt.Dimension(118, 100));
        jLabel6.setMinimumSize(new java.awt.Dimension(118, 100));
        jLabel6.setPreferredSize(new java.awt.Dimension(130, 50));
        jPanel3.add(jLabel6);

        jPanel1.setBackground(new java.awt.Color(27, 38, 59));

        saveGame.setBackground(new java.awt.Color(3, 52, 110));
        saveGame.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveGame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveGameMouseClicked(evt);
            }
        });

        signInTxt3.setFont(new java.awt.Font("Samsung Sans", 0, 18)); // NOI18N
        signInTxt3.setForeground(new java.awt.Color(207, 243, 255));
        signInTxt3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        signInTxt3.setText("Descargar");
        signInTxt3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        signInTxt3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                signInTxt3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout saveGameLayout = new javax.swing.GroupLayout(saveGame);
        saveGame.setLayout(saveGameLayout);
        saveGameLayout.setHorizontalGroup(
            saveGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveGameLayout.createSequentialGroup()
                .addComponent(signInTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        saveGameLayout.setVerticalGroup(
            saveGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveGameLayout.createSequentialGroup()
                .addComponent(signInTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 358, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(saveGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 165, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 56, Short.MAX_VALUE)
                    .addComponent(saveGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 57, Short.MAX_VALUE)))
        );

        jPanel3.add(jPanel1);

        titlePanel1.add(jPanel3);

        bodyContainer.add(titlePanel1);

        contenedor.add(bodyContainer, java.awt.BorderLayout.CENTER);

        Body.add(contenedor);

        jScrollPane1.setViewportView(Body);

        BgPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(BgPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void signInTxt3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signInTxt3MouseClicked
        // TODO add your handling code here:
        // Logica para descargar 
        if (juegoSeleccionado != null) {
            // Ruta del archivo del juego
            String rutaArchivo = juegoSeleccionado;

            // Verificar si la ruta es válida
            File archivoOriginal = new File(rutaArchivo);
            if (!archivoOriginal.exists()) {
                JOptionPane.showMessageDialog(this, "El archivo del juego no existe.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!archivoOriginal.canRead()) {
                JOptionPane.showMessageDialog(this, "No se puede leer el archivo del juego.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Crear un JFileChooser para que el usuario elija la ubicación de descarga
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Guardar juego");

            // Obtener el nombre del archivo original
            String nombreArchivo = archivoOriginal.getName();

            // Establecer el nombre por defecto del archivo
            fileChooser.setSelectedFile(new File(nombreArchivo));

            // Mostrar el diálogo de guardar archivo
            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                // Obtener la ruta de destino seleccionada por el usuario
                File archivoDestino = fileChooser.getSelectedFile();

                // Verificar permisos de escritura
                if (!archivoDestino.getParentFile().canWrite()) {
                    JOptionPane.showMessageDialog(this, "No se puede escribir en la ubicación seleccionada.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                try {
                    // Copiar el archivo desde la ruta original a la ubicación de descarga
                    Files.copy(archivoOriginal.toPath(), archivoDestino.toPath(), StandardCopyOption.REPLACE_EXISTING);

                    // Mostrar un mensaje de éxito
                    JOptionPane.showMessageDialog(this, "El juego se ha descargado correctamente.", "Descarga completada", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException e) {
                    e.printStackTrace(); // Imprime la traza completa
                    JOptionPane.showMessageDialog(this, "Error al descargar el juego: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se seleccionó una ubicación válida.", "Error", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            // Mostrar un mensaje si no hay ningún juego seleccionado
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ningún juego.", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_signInTxt3MouseClicked

    private void saveGameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveGameMouseClicked
        
    }//GEN-LAST:event_saveGameMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new game().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BgPanel;
    private javax.swing.JPanel Body;
    private javax.swing.JPanel InternTags;
    private javax.swing.JPanel bodyContainer;
    private javax.swing.JPanel contenedor;
    private javax.swing.JPanel descriptionPanel;
    private javax.swing.JPanel gameImage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel saveGame;
    private javax.swing.JLabel signInTxt3;
    private javax.swing.JPanel subtitlePanel;
    private javax.swing.JPanel tagPanel;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JPanel titlePanel1;
    // End of variables declaration//GEN-END:variables
}
